"use strict";!function(o){o.module("application",["ngRoute"]).constant("applicationSettings",{applicationTitle:"Roomy",getFirebaseRestUrl:function(o){return"https://confdeconflictor.firebaseio.com/"+o+".json"},getImagePath:function(o){return"www/assets/images/${file}"}}).config(["$locationProvider","$routeProvider",function(o,t){o.html5Mode(!0),t.when("/login",{templateUrl:"www/app/routes/loginpage/loginpage.htm"}).when("/room/:id",{resolve:{isLoggedIn:["loginService",function(o){return!!o.isLoggedIn()||$location.path("/welcome")}]},template:"<r-room></r-room>"}).when("/welcome",{templateUrl:"www/app/routes/welcome/welcome.htm"}).otherwise({redirectTo:"/welcome"})}])}(window.angular),function(o){o.module("application").service("loginService",["$rootScope",function(o){function t(o){console.log("updateLogInStatus triggered"),console.log("authenticatedUser is: ",o),console.log("notifyControllerCallback is: ",s),a=o}function e(){return console.log("loggedInUser is: ",a),a}function n(){return firebase.auth().signInWithPopup(new firebase.auth.GithubAuthProvider)}function i(){return firebase.auth().signOut()}function r(){return Boolean(a)}function l(){return a?a.displayName.split(" ")[0]:""}this.login=n,this.logout=i,this.isLoggedIn=r,this.getLoggedInUser=e,this.getFirstName=l;var a=null,s=null;firebase.auth().onAuthStateChanged(t)}])}(window.angular),function(o){o.module("application").factory("navigationService",function(){function o(){return n}function t(o){n||(n=[]),n.push(o)}function e(o){n.forEach(function(t,e){t.id===o.id&&n.splice(e,1)})}return{getNavigation:o,addNavigationItem:t,removeNavigationItem:e};var n})}(window.angular),function(o){o.module("application").factory("roomService",["$http","applicationSettings",function(t,e){function n(){return console.log("getRooms is: ",n),s}function i(o){return t.get(e.getFirebaseRestUrl("rooms/${id}")).then(function(o){return o.data}).then(function(t){return t.id=o,t})}function r(){return t.get(e.getFirebaseRestUrl("rooms")).then(function(o){return o.data}).then(function(t){return o.forEach(t,function(o,t){o.id=t,console.log("Room updated during fetch",o)}),t})}function l(o,n){return i(o).then(function(i){return t.post(e.getFirebaseRestUrl("rooms/"+o+"/reservations/"+a()),n)})}function a(o){var t=void 0;return t=o?new Date(o).toDateString():(new Date).toDateString(),t=t.replace(/ /g,"")}return{getRooms:n,getRoomById:i,fetchRoomsFromDB:r,writeRoomReservation:l};var s}])}(window.angular),function(o){o.module("application").controller("exerciseOneController",["$routeParams","es",function(o,t){this.es=t}])}(window.angular),function(o){o.module("application").controller("exerciseTwoController",["$routeParams","es",function(o,t){function e(){return n[Math.floor(Math.random()*n.length)]}this.es=t,this.title="Exercise 2";var n=[{name:"Brown",hex:"#A52A2A"},{name:"Blue",hex:"#0000FF"},{name:"Gainsboro",hex:"#DCDCDC"}];this.objectArray=[],this._createObject=function(){return{name:"Obj"+(this.objectArray.length+1),clickCount:0,color:e()}},this.controllerInitObject=this.objectArray,this.addNewObject=function(){this.objectArray.push(this._createObject())};this.buttonText="Button text",this.buttonMouseEnter=function(){this.buttonText="Rolled over"},this.buttonResetClick=function(){this.buttonText="Button text"}}])}(window.angular),function(o){o.module("application").component("gwLogin",{templateUrl:"www/app/components/login/login.htm",controller:"loginComponentController",controllerAs:"ctrl"})}(window.angular),function(o){o.module("application").controller("loginComponentController",["loginService","$scope",function(o,t){this.loginService=o}])}(window.angular),function(o){o.module("application").component("navigation",{templateUrl:"www/app/components/navigation/navigation.html",controller:"navigationController",controllerAs:"ctrl"})}(window.angular),function(o){o.module("application").controller("navigationController",["$location","loginService","navigationService","roomService","$scope",function(t,e,n,i,r){this.$onInit=function(){function r(o){return o===t.path()}this.loginService=e,this.navigationService=n,this.roomService=i,this.isItemActive=r;var l={title:"Welcome",url:"/welcome"};n.addNavigationItem(l),i.fetchRoomsFromDB().then(function(t){console.log(t),o.forEach(t,function(o,t){var e={title:o.name,url:"/room/"+t};n.addNavigationItem(e)})})}}])}(window.angular),function(o){o.module("application").component("rRoom",{templateUrl:"www/app/components/rooms/room.htm",controller:"roomComponentController",controllerAs:"ctrl"})}(window.angular),function(o){o.module("application").controller("roomComponentController",["roomService",function(o){this.$onInit=function(){this.roomService=o,this.startTime=new Date,this.startTime.setHours(0,0,0,0),this.endTime=new Date,this.endTime.setHours(0,0,0,0),this.reserveReasons=["Birthday","Conference","Interview","Scrum Meeting","Honeymoon"],this.master={}},this.roomSubmission=function(){return console.log("start",this.startTime),console.log("end",this.endTime),this.startTime>=this.endTime?alert("Message from controller: time invalid"):this.myForm.$invalid?alert("Message from controller: form invalid"):(o.writeRoomReservation(),void alert("Room submitted"))}}])}(window.angular),function(o){o.module("application").controller("roomsController",["loginService",function(o){this.loginService=o}])}(window.angular),function(o){o.module("application").component("rRoomReservationForm",{templateUrl:"www/app/components/rooms/room-reservation-form/room-reservation-form.htm",controller:"roomReservationFormController",controllerAs:"ctrl",require:{parentController:"^rRoom"}})}(window.angular),function(o){o.module("application").controller("roomReservationFormController",["roomService",function(o){this.$onInit=function(){this.roomService=o,this.startTime=new Date,this.startTime.setHours(0,0,0,0),this.endTime=new Date,this.endTime.setHours(0,0,0,0),this.reserveReasons=["Birthday","Conference","Interview","Scrum Meeting","Honeymoon"],this.master={}},this.roomSubmission=function(){return console.log("start",this.startTime),console.log("end",this.endTime),console.log("this is: ",this),console.log("this.room is: ",this.room),console.log(this.myForm),this.startTime>=this.endTime?alert("Message from controller: time invalid"):this.myForm.$invalid?alert("Message from controller: form invalid"):void alert("Room submitted")}}])}(window.angular),function(o){o.module("application").component("rRoomReservationList",{templateUrl:"www/app/components/rooms/room-reservation-list/room-reservation-list.htm",controller:"roomReservationListController",controllerAs:"ctrl"})}(window.angular),function(o){o.module("application").controller("roomReservationListController",function(){})}(window.angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
