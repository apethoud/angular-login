"use strict";!function(o){o.module("application",["ngRoute"]).config(["$locationProvider","$routeProvider",function(o,n){o.html5Mode(!0),n.when("/login",{templateUrl:"www/app/routes/loginpage/loginpage.htm"}).when("/rooms",{templateUrl:"www/app/routes/rooms/rooms.htm",controller:"roomsController",controllerAs:"ctrl"}).when("/welcome",{templateUrl:"www/app/routes/welcome/welcome.htm"}).otherwise({redirectTo:"/welcome"})}])}(window.angular),function(o){o.module("application").service("loginService",["$location",function(o){function n(n){this.loggedInUser={name:n},this.inputName=null,o.path("/rooms")}function t(){this.loggedInUser={},o.path("/welcome")}function e(){return Object.keys(this.loggedInUser).length>0}this.loggedInUser={},this.login=n,this.logout=t,this.isLoggedIn=e}])}(window.angular),function(o){o.module("application").service("navUpdateService",["$location",function(o){function n(n){return n===o.path()}this.updateActive=n}])}(window.angular),function(o){o.module("application").factory("navigationService",function(){function o(){return console.log("running getNavigation and navigationItems is: ",e),e}function n(o){e||(e=[]),e.push(o)}function t(o){e.forEach(function(n,t){n.id===o.id&&e.splice(t,1)})}return{getNavigation:o,addNavigationItem:n,removeNavigationItem:t};var e})}(window.angular),function(o){o.module("application").factory("roomService",function(){function o(){return e}function n(o){}function t(){return e=[{name:"Donkey Kong",id:1,picture:"/assets/images/dk.jpg"},{name:"Sonic",id:2,picture:"/assets/images/sonic.jpg"},{name:"Zelda",id:3,picture:"/assets/images/zelda.jpg"}]}return{getRooms:o,getRoomById:n,fetchRoomsFromDB:t};var e})}(window.angular),function(o){o.module("application").controller("exerciseOneController",["$routeParams","es",function(o,n){this.es=n}])}(window.angular),function(o){o.module("application").controller("exerciseTwoController",["$routeParams","es",function(o,n){function t(){return e[Math.floor(Math.random()*e.length)]}this.es=n,this.title="Exercise 2";var e=[{name:"Brown",hex:"#A52A2A"},{name:"Blue",hex:"#0000FF"},{name:"Gainsboro",hex:"#DCDCDC"}];this.objectArray=[],this._createObject=function(){return{name:"Obj"+(this.objectArray.length+1),clickCount:0,color:t()}},this.controllerInitObject=this.objectArray,this.addNewObject=function(){this.objectArray.push(this._createObject())};this.buttonText="Button text",this.buttonMouseEnter=function(){this.buttonText="Rolled over"},this.buttonResetClick=function(){this.buttonText="Button text"}}])}(window.angular),function(o){o.module("application").component("gwLogin",{templateUrl:"www/app/components/login/login.htm",controller:"loginComponentController",controllerAs:"ctrl"})}(window.angular),function(o){o.module("application").controller("loginComponentController",["loginService",function(o){this.loginService=o}])}(window.angular),function(o){o.module("application").component("navigation",{templateUrl:"www/app/components/navigation/navigation.html",controller:"navigationController",controllerAs:"ctrl"})}(window.angular),function(o){o.module("application").controller("navigationController",["$location","loginService","navigationService","roomService",function(o,n,t,e){this.$onInit=function(){this.loginService=n,this.navigationService=t,this.roomService=e;var o={title:"Welcome",url:"/welcome"};t.addNavigationItem(o),e.fetchRoomsFromDB().forEach(function(o){var n={title:o.name,url:"/room/"+o.id};t.addNavigationItem(n)});var i={title:"Login",url:"/login"};t.addNavigationItem(i)}}])}(window.angular),function(o){o.module("application").controller("roomComponentController",function(){this.$onInit=function(){this.startTime=new Date,this.startTime.setHours(0,0,0,0),this.endTime=new Date,this.endTime.setHours(0,0,0,0),this.reserveReasons=["Birthday","Conference","Interview","Scrum Meeting","Honeymoon"]},this.roomSubmission=function(){return console.log("start",this.startTime),console.log("end",this.endTime),this.startTime>=this.endTime?alert("Message from controller: time invalid"):this.myForm.$invalid?alert("Message from controller: form invalid"):void alert("Room submitted")}})}(window.angular),function(o){o.module("application").controller("roomsController",["loginService",function(o){this.loginService=o}])}(window.angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
