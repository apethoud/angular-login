"use strict";!function(o){o.module("application",["ngRoute"]).config(["$locationProvider","$routeProvider",function(o,t){o.html5Mode(!0),t.when("/login",{templateUrl:"www/app/routes/loginpage/loginpage.htm"}).when("/room/:id",{template:"<r-room></r-room>"}).when("/welcome",{templateUrl:"www/app/routes/welcome/welcome.htm"}).otherwise({redirectTo:"/welcome"})}])}(window.angular),function(o){o.module("application").factory("navigationService",function(){function o(){return e}function t(o){e||(e=[]),e.push(o)}function n(o){e.forEach(function(t,n){t.id===o.id&&e.splice(n,1)})}return{getNavigation:o,addNavigationItem:t,removeNavigationItem:n};var e})}(window.angular),function(o){o.module("application").service("loginService",["$location",function(o){function t(t){this.loggedInUser={name:t},this.inputName=null,o.path("/rooms")}function n(){this.loggedInUser={},o.path("/welcome")}function e(){return Object.keys(this.loggedInUser).length>0}this.loggedInUser={},this.login=t,this.logout=n,this.isLoggedIn=e}])}(window.angular),function(o){o.module("application").factory("roomService",["$location","$routeParams",function(o,t){function n(){return console.log("getRooms is: ",n),r}function e(){var o=[],n="";o.push(r);for(var e=0;e<o[0].length;e++)o[0][e].id===parseInt(t.id,10)&&(n=o[0][e].name);return n}function i(){return r=[{name:"Donkey Kong",id:1,picture:"/assets/images/dk.jpg"},{name:"Sonic",id:2,picture:"/assets/images/sonic.jpg"},{name:"Zelda",id:3,picture:"/assets/images/zelda.jpg"}]}return{getRooms:n,getRoomById:e,fetchRoomsFromDB:i};var r}])}(window.angular),function(o){o.module("application").controller("exerciseOneController",["$routeParams","es",function(o,t){this.es=t}])}(window.angular),function(o){o.module("application").controller("exerciseTwoController",["$routeParams","es",function(o,t){function n(){return e[Math.floor(Math.random()*e.length)]}this.es=t,this.title="Exercise 2";var e=[{name:"Brown",hex:"#A52A2A"},{name:"Blue",hex:"#0000FF"},{name:"Gainsboro",hex:"#DCDCDC"}];this.objectArray=[],this._createObject=function(){return{name:"Obj"+(this.objectArray.length+1),clickCount:0,color:n()}},this.controllerInitObject=this.objectArray,this.addNewObject=function(){this.objectArray.push(this._createObject())};this.buttonText="Button text",this.buttonMouseEnter=function(){this.buttonText="Rolled over"},this.buttonResetClick=function(){this.buttonText="Button text"}}])}(window.angular),function(o){o.module("application").component("navigation",{templateUrl:"www/app/components/navigation/navigation.html",controller:"navigationController",controllerAs:"ctrl"})}(window.angular),function(o){o.module("application").controller("navigationController",["$location","loginService","navigationService","roomService",function(o,t,n,e){this.$onInit=function(){function i(t){return t===o.path()}this.loginService=t,this.navigationService=n,this.roomService=e,this.isItemActive=i;var r={title:"Welcome",url:"/welcome"};n.addNavigationItem(r),e.fetchRoomsFromDB().forEach(function(o){var t={title:o.name,url:"/room/"+o.id};n.addNavigationItem(t)})}}])}(window.angular),function(o){o.module("application").component("gwLogin",{templateUrl:"www/app/components/login/login.htm",controller:"loginComponentController",controllerAs:"ctrl"})}(window.angular),function(o){o.module("application").controller("loginComponentController",["loginService",function(o){this.loginService=o}])}(window.angular),function(o){o.module("application").component("rRoom",{templateUrl:"www/app/components/rooms/room.htm",controller:"roomComponentController",controllerAs:"ctrl"})}(window.angular),function(o){o.module("application").controller("roomComponentController",["roomService",function(o){this.$onInit=function(){this.roomService=o,this.startTime=new Date,this.startTime.setHours(0,0,0,0),this.endTime=new Date,this.endTime.setHours(0,0,0,0),this.reserveReasons=["Birthday","Conference","Interview","Scrum Meeting","Honeymoon"],this.master={}},this.roomSubmission=function(){return console.log("start",this.startTime),console.log("end",this.endTime),this.startTime>=this.endTime?alert("Message from controller: time invalid"):this.myForm.$invalid?alert("Message from controller: form invalid"):void alert("Room submitted")}}])}(window.angular),function(o){o.module("application").controller("roomsController",["loginService",function(o){this.loginService=o}])}(window.angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
